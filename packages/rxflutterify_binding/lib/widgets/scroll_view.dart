library rxflutterify_binding; // ignore_for_file: no_leading_underscores_for_library_prefixes

import 'dart:ui' as ui;

import 'package:flutter/foundation.dart' as _i2;
import 'package:flutter/gestures.dart' as _i5;
import 'package:flutter/painting.dart' as _i3;
import 'package:flutter/rendering.dart' as _i4;
import 'package:flutter/widgets.dart' as _i1;

import '../wrapper.dart';

final class ListView extends Wrapper {
  @Goto(_i1.ListView.new)
  ListView(
    $ $config, {
    _i2.Key? key,
    _i3.Axis scrollDirection = _i3.Axis.vertical,
    bool reverse = false,
    _i1.ScrollController? controller,
    bool? primary,
    _i1.ScrollPhysics? physics,
    bool shrinkWrap = false,
    _i3.EdgeInsetsGeometry? padding,
    double? itemExtent,
    _i4.ItemExtentBuilder? itemExtentBuilder,
    _i1.Widget? prototypeItem,
    bool addAutomaticKeepAlives = true,
    bool addRepaintBoundaries = true,
    bool addSemanticIndexes = true,
    double? cacheExtent,
    List<_i1.Widget> children = const [],
    int? semanticChildCount,
    _i5.DragStartBehavior dragStartBehavior = _i5.DragStartBehavior.start,
    _i1.ScrollViewKeyboardDismissBehavior keyboardDismissBehavior = _i1.ScrollViewKeyboardDismissBehavior.manual,
    String? restorationId,
    ui.Clip clipBehavior = ui.Clip.hardEdge,
  }) : super(
          Argument({
            #key: key,
            #scrollDirection: scrollDirection,
            #reverse: reverse,
            #controller: controller,
            #primary: primary,
            #physics: physics,
            #shrinkWrap: shrinkWrap,
            #padding: padding,
            #itemExtent: itemExtent,
            #itemExtentBuilder: itemExtentBuilder,
            #prototypeItem: prototypeItem,
            #addAutomaticKeepAlives: addAutomaticKeepAlives,
            #addRepaintBoundaries: addRepaintBoundaries,
            #addSemanticIndexes: addSemanticIndexes,
            #cacheExtent: cacheExtent,
            #children: children,
            #semanticChildCount: semanticChildCount,
            #dragStartBehavior: dragStartBehavior,
            #keyboardDismissBehavior: keyboardDismissBehavior,
            #restorationId: restorationId,
            #clipBehavior: clipBehavior,
          }),
          builder: (args) => _i1.ListView(
            key: args(#key),
            scrollDirection: args(#scrollDirection),
            reverse: args(#reverse),
            controller: args(#controller),
            primary: args(#primary),
            physics: args(#physics),
            shrinkWrap: args(#shrinkWrap),
            padding: args(#padding),
            itemExtent: args(#itemExtent),
            itemExtentBuilder: args(#itemExtentBuilder),
            prototypeItem: args(#prototypeItem),
            addAutomaticKeepAlives: args(#addAutomaticKeepAlives),
            addRepaintBoundaries: args(#addRepaintBoundaries),
            addSemanticIndexes: args(#addSemanticIndexes),
            cacheExtent: args(#cacheExtent),
            children: args(#children),
            semanticChildCount: args(#semanticChildCount),
            dragStartBehavior: args(#dragStartBehavior),
            keyboardDismissBehavior: args(#keyboardDismissBehavior),
            restorationId: args(#restorationId),
            clipBehavior: args(#clipBehavior),
          ),
        );

  @Goto(_i1.ListView.builder)
  ListView.builder(
    $ $config, {
    _i2.Key? key,
    _i3.Axis scrollDirection = _i3.Axis.vertical,
    bool reverse = false,
    _i1.ScrollController? controller,
    bool? primary,
    _i1.ScrollPhysics? physics,
    bool shrinkWrap = false,
    _i3.EdgeInsetsGeometry? padding,
    double? itemExtent,
    _i4.ItemExtentBuilder? itemExtentBuilder,
    _i1.Widget? prototypeItem,
    required _i1.NullableIndexedWidgetBuilder itemBuilder,
    _i1.ChildIndexGetter? findChildIndexCallback,
    int? itemCount,
    bool addAutomaticKeepAlives = true,
    bool addRepaintBoundaries = true,
    bool addSemanticIndexes = true,
    double? cacheExtent,
    int? semanticChildCount,
    _i5.DragStartBehavior dragStartBehavior = _i5.DragStartBehavior.start,
    _i1.ScrollViewKeyboardDismissBehavior keyboardDismissBehavior = _i1.ScrollViewKeyboardDismissBehavior.manual,
    String? restorationId,
    ui.Clip clipBehavior = ui.Clip.hardEdge,
  }) : super(
          Argument({
            #key: key,
            #scrollDirection: scrollDirection,
            #reverse: reverse,
            #controller: controller,
            #primary: primary,
            #physics: physics,
            #shrinkWrap: shrinkWrap,
            #padding: padding,
            #itemExtent: itemExtent,
            #itemExtentBuilder: itemExtentBuilder,
            #prototypeItem: prototypeItem,
            #itemBuilder: itemBuilder,
            #findChildIndexCallback: findChildIndexCallback,
            #itemCount: itemCount,
            #addAutomaticKeepAlives: addAutomaticKeepAlives,
            #addRepaintBoundaries: addRepaintBoundaries,
            #addSemanticIndexes: addSemanticIndexes,
            #cacheExtent: cacheExtent,
            #semanticChildCount: semanticChildCount,
            #dragStartBehavior: dragStartBehavior,
            #keyboardDismissBehavior: keyboardDismissBehavior,
            #restorationId: restorationId,
            #clipBehavior: clipBehavior,
          }),
          builder: (args) => _i1.ListView.builder(
            key: args(#key),
            scrollDirection: args(#scrollDirection),
            reverse: args(#reverse),
            controller: args(#controller),
            primary: args(#primary),
            physics: args(#physics),
            shrinkWrap: args(#shrinkWrap),
            padding: args(#padding),
            itemExtent: args(#itemExtent),
            itemExtentBuilder: args(#itemExtentBuilder),
            prototypeItem: args(#prototypeItem),
            itemBuilder: args(#itemBuilder),
            findChildIndexCallback: args(#findChildIndexCallback),
            itemCount: args(#itemCount),
            addAutomaticKeepAlives: args(#addAutomaticKeepAlives),
            addRepaintBoundaries: args(#addRepaintBoundaries),
            addSemanticIndexes: args(#addSemanticIndexes),
            cacheExtent: args(#cacheExtent),
            semanticChildCount: args(#semanticChildCount),
            dragStartBehavior: args(#dragStartBehavior),
            keyboardDismissBehavior: args(#keyboardDismissBehavior),
            restorationId: args(#restorationId),
            clipBehavior: args(#clipBehavior),
          ),
        );

  @Goto(_i1.ListView.separated)
  ListView.separated(
    $ $config, {
    _i2.Key? key,
    _i3.Axis scrollDirection = _i3.Axis.vertical,
    bool reverse = false,
    _i1.ScrollController? controller,
    bool? primary,
    _i1.ScrollPhysics? physics,
    bool shrinkWrap = false,
    _i3.EdgeInsetsGeometry? padding,
    required _i1.NullableIndexedWidgetBuilder itemBuilder,
    _i1.ChildIndexGetter? findChildIndexCallback,
    required _i1.IndexedWidgetBuilder separatorBuilder,
    required int itemCount,
    bool addAutomaticKeepAlives = true,
    bool addRepaintBoundaries = true,
    bool addSemanticIndexes = true,
    double? cacheExtent,
    _i5.DragStartBehavior dragStartBehavior = _i5.DragStartBehavior.start,
    _i1.ScrollViewKeyboardDismissBehavior keyboardDismissBehavior = _i1.ScrollViewKeyboardDismissBehavior.manual,
    String? restorationId,
    ui.Clip clipBehavior = ui.Clip.hardEdge,
  }) : super(
          Argument({
            #key: key,
            #scrollDirection: scrollDirection,
            #reverse: reverse,
            #controller: controller,
            #primary: primary,
            #physics: physics,
            #shrinkWrap: shrinkWrap,
            #padding: padding,
            #itemBuilder: itemBuilder,
            #findChildIndexCallback: findChildIndexCallback,
            #separatorBuilder: separatorBuilder,
            #itemCount: itemCount,
            #addAutomaticKeepAlives: addAutomaticKeepAlives,
            #addRepaintBoundaries: addRepaintBoundaries,
            #addSemanticIndexes: addSemanticIndexes,
            #cacheExtent: cacheExtent,
            #dragStartBehavior: dragStartBehavior,
            #keyboardDismissBehavior: keyboardDismissBehavior,
            #restorationId: restorationId,
            #clipBehavior: clipBehavior,
          }),
          builder: (args) => _i1.ListView.separated(
            key: args(#key),
            scrollDirection: args(#scrollDirection),
            reverse: args(#reverse),
            controller: args(#controller),
            primary: args(#primary),
            physics: args(#physics),
            shrinkWrap: args(#shrinkWrap),
            padding: args(#padding),
            itemBuilder: args(#itemBuilder),
            findChildIndexCallback: args(#findChildIndexCallback),
            separatorBuilder: args(#separatorBuilder),
            itemCount: args(#itemCount),
            addAutomaticKeepAlives: args(#addAutomaticKeepAlives),
            addRepaintBoundaries: args(#addRepaintBoundaries),
            addSemanticIndexes: args(#addSemanticIndexes),
            cacheExtent: args(#cacheExtent),
            dragStartBehavior: args(#dragStartBehavior),
            keyboardDismissBehavior: args(#keyboardDismissBehavior),
            restorationId: args(#restorationId),
            clipBehavior: args(#clipBehavior),
          ),
        );

  @Goto(_i1.ListView.custom)
  ListView.custom(
    $ $config, {
    _i2.Key? key,
    _i3.Axis scrollDirection = _i3.Axis.vertical,
    bool reverse = false,
    _i1.ScrollController? controller,
    bool? primary,
    _i1.ScrollPhysics? physics,
    bool shrinkWrap = false,
    _i3.EdgeInsetsGeometry? padding,
    double? itemExtent,
    _i1.Widget? prototypeItem,
    _i4.ItemExtentBuilder? itemExtentBuilder,
    required _i1.SliverChildDelegate childrenDelegate,
    double? cacheExtent,
    int? semanticChildCount,
    _i5.DragStartBehavior dragStartBehavior = _i5.DragStartBehavior.start,
    _i1.ScrollViewKeyboardDismissBehavior keyboardDismissBehavior = _i1.ScrollViewKeyboardDismissBehavior.manual,
    String? restorationId,
    ui.Clip clipBehavior = ui.Clip.hardEdge,
  }) : super(
          Argument({
            #key: key,
            #scrollDirection: scrollDirection,
            #reverse: reverse,
            #controller: controller,
            #primary: primary,
            #physics: physics,
            #shrinkWrap: shrinkWrap,
            #padding: padding,
            #itemExtent: itemExtent,
            #prototypeItem: prototypeItem,
            #itemExtentBuilder: itemExtentBuilder,
            #childrenDelegate: childrenDelegate,
            #cacheExtent: cacheExtent,
            #semanticChildCount: semanticChildCount,
            #dragStartBehavior: dragStartBehavior,
            #keyboardDismissBehavior: keyboardDismissBehavior,
            #restorationId: restorationId,
            #clipBehavior: clipBehavior,
          }),
          builder: (args) => _i1.ListView.custom(
            key: args(#key),
            scrollDirection: args(#scrollDirection),
            reverse: args(#reverse),
            controller: args(#controller),
            primary: args(#primary),
            physics: args(#physics),
            shrinkWrap: args(#shrinkWrap),
            padding: args(#padding),
            itemExtent: args(#itemExtent),
            prototypeItem: args(#prototypeItem),
            itemExtentBuilder: args(#itemExtentBuilder),
            childrenDelegate: args(#childrenDelegate),
            cacheExtent: args(#cacheExtent),
            semanticChildCount: args(#semanticChildCount),
            dragStartBehavior: args(#dragStartBehavior),
            keyboardDismissBehavior: args(#keyboardDismissBehavior),
            restorationId: args(#restorationId),
            clipBehavior: args(#clipBehavior),
          ),
        );
}

final class CustomScrollView extends Wrapper {
  @Goto(_i1.CustomScrollView.new)
  CustomScrollView(
    $ $config, {
    _i2.Key? key,
    _i3.Axis scrollDirection = _i3.Axis.vertical,
    bool reverse = false,
    _i1.ScrollController? controller,
    bool? primary,
    _i1.ScrollPhysics? physics,
    _i1.ScrollBehavior? scrollBehavior,
    bool shrinkWrap = false,
    _i2.Key? center,
    double anchor = 0.0,
    double? cacheExtent,
    List<_i1.Widget> slivers = const [],
    int? semanticChildCount,
    _i5.DragStartBehavior dragStartBehavior = _i5.DragStartBehavior.start,
    _i1.ScrollViewKeyboardDismissBehavior keyboardDismissBehavior = _i1.ScrollViewKeyboardDismissBehavior.manual,
    String? restorationId,
    ui.Clip clipBehavior = ui.Clip.hardEdge,
  }) : super(
          Argument({
            #key: key,
            #scrollDirection: scrollDirection,
            #reverse: reverse,
            #controller: controller,
            #primary: primary,
            #physics: physics,
            #scrollBehavior: scrollBehavior,
            #shrinkWrap: shrinkWrap,
            #center: center,
            #anchor: anchor,
            #cacheExtent: cacheExtent,
            #slivers: slivers,
            #semanticChildCount: semanticChildCount,
            #dragStartBehavior: dragStartBehavior,
            #keyboardDismissBehavior: keyboardDismissBehavior,
            #restorationId: restorationId,
            #clipBehavior: clipBehavior,
          }),
          builder: (args) => _i1.CustomScrollView(
            key: args(#key),
            scrollDirection: args(#scrollDirection),
            reverse: args(#reverse),
            controller: args(#controller),
            primary: args(#primary),
            physics: args(#physics),
            scrollBehavior: args(#scrollBehavior),
            shrinkWrap: args(#shrinkWrap),
            center: args(#center),
            anchor: args(#anchor),
            cacheExtent: args(#cacheExtent),
            slivers: args(#slivers),
            semanticChildCount: args(#semanticChildCount),
            dragStartBehavior: args(#dragStartBehavior),
            keyboardDismissBehavior: args(#keyboardDismissBehavior),
            restorationId: args(#restorationId),
            clipBehavior: args(#clipBehavior),
          ),
        );
}

final class GridView extends Wrapper {
  @Goto(_i1.GridView.new)
  GridView(
    $ $config, {
    _i2.Key? key,
    _i3.Axis scrollDirection = _i3.Axis.vertical,
    bool reverse = false,
    _i1.ScrollController? controller,
    bool? primary,
    _i1.ScrollPhysics? physics,
    bool shrinkWrap = false,
    _i3.EdgeInsetsGeometry? padding,
    required _i4.SliverGridDelegate gridDelegate,
    bool addAutomaticKeepAlives = true,
    bool addRepaintBoundaries = true,
    bool addSemanticIndexes = true,
    double? cacheExtent,
    List<_i1.Widget> children = const [],
    int? semanticChildCount,
    _i5.DragStartBehavior dragStartBehavior = _i5.DragStartBehavior.start,
    ui.Clip clipBehavior = ui.Clip.hardEdge,
    _i1.ScrollViewKeyboardDismissBehavior keyboardDismissBehavior = _i1.ScrollViewKeyboardDismissBehavior.manual,
    String? restorationId,
  }) : super(
          Argument({
            #key: key,
            #scrollDirection: scrollDirection,
            #reverse: reverse,
            #controller: controller,
            #primary: primary,
            #physics: physics,
            #shrinkWrap: shrinkWrap,
            #padding: padding,
            #gridDelegate: gridDelegate,
            #addAutomaticKeepAlives: addAutomaticKeepAlives,
            #addRepaintBoundaries: addRepaintBoundaries,
            #addSemanticIndexes: addSemanticIndexes,
            #cacheExtent: cacheExtent,
            #children: children,
            #semanticChildCount: semanticChildCount,
            #dragStartBehavior: dragStartBehavior,
            #clipBehavior: clipBehavior,
            #keyboardDismissBehavior: keyboardDismissBehavior,
            #restorationId: restorationId,
          }),
          builder: (args) => _i1.GridView(
            key: args(#key),
            scrollDirection: args(#scrollDirection),
            reverse: args(#reverse),
            controller: args(#controller),
            primary: args(#primary),
            physics: args(#physics),
            shrinkWrap: args(#shrinkWrap),
            padding: args(#padding),
            gridDelegate: args(#gridDelegate),
            addAutomaticKeepAlives: args(#addAutomaticKeepAlives),
            addRepaintBoundaries: args(#addRepaintBoundaries),
            addSemanticIndexes: args(#addSemanticIndexes),
            cacheExtent: args(#cacheExtent),
            children: args(#children),
            semanticChildCount: args(#semanticChildCount),
            dragStartBehavior: args(#dragStartBehavior),
            clipBehavior: args(#clipBehavior),
            keyboardDismissBehavior: args(#keyboardDismissBehavior),
            restorationId: args(#restorationId),
          ),
        );

  @Goto(_i1.GridView.builder)
  GridView.builder(
    $ $config, {
    _i2.Key? key,
    _i3.Axis scrollDirection = _i3.Axis.vertical,
    bool reverse = false,
    _i1.ScrollController? controller,
    bool? primary,
    _i1.ScrollPhysics? physics,
    bool shrinkWrap = false,
    _i3.EdgeInsetsGeometry? padding,
    required _i4.SliverGridDelegate gridDelegate,
    required _i1.NullableIndexedWidgetBuilder itemBuilder,
    _i1.ChildIndexGetter? findChildIndexCallback,
    int? itemCount,
    bool addAutomaticKeepAlives = true,
    bool addRepaintBoundaries = true,
    bool addSemanticIndexes = true,
    double? cacheExtent,
    int? semanticChildCount,
    _i5.DragStartBehavior dragStartBehavior = _i5.DragStartBehavior.start,
    _i1.ScrollViewKeyboardDismissBehavior keyboardDismissBehavior = _i1.ScrollViewKeyboardDismissBehavior.manual,
    String? restorationId,
    ui.Clip clipBehavior = ui.Clip.hardEdge,
  }) : super(
          Argument({
            #key: key,
            #scrollDirection: scrollDirection,
            #reverse: reverse,
            #controller: controller,
            #primary: primary,
            #physics: physics,
            #shrinkWrap: shrinkWrap,
            #padding: padding,
            #gridDelegate: gridDelegate,
            #itemBuilder: itemBuilder,
            #findChildIndexCallback: findChildIndexCallback,
            #itemCount: itemCount,
            #addAutomaticKeepAlives: addAutomaticKeepAlives,
            #addRepaintBoundaries: addRepaintBoundaries,
            #addSemanticIndexes: addSemanticIndexes,
            #cacheExtent: cacheExtent,
            #semanticChildCount: semanticChildCount,
            #dragStartBehavior: dragStartBehavior,
            #keyboardDismissBehavior: keyboardDismissBehavior,
            #restorationId: restorationId,
            #clipBehavior: clipBehavior,
          }),
          builder: (args) => _i1.GridView.builder(
            key: args(#key),
            scrollDirection: args(#scrollDirection),
            reverse: args(#reverse),
            controller: args(#controller),
            primary: args(#primary),
            physics: args(#physics),
            shrinkWrap: args(#shrinkWrap),
            padding: args(#padding),
            gridDelegate: args(#gridDelegate),
            itemBuilder: args(#itemBuilder),
            findChildIndexCallback: args(#findChildIndexCallback),
            itemCount: args(#itemCount),
            addAutomaticKeepAlives: args(#addAutomaticKeepAlives),
            addRepaintBoundaries: args(#addRepaintBoundaries),
            addSemanticIndexes: args(#addSemanticIndexes),
            cacheExtent: args(#cacheExtent),
            semanticChildCount: args(#semanticChildCount),
            dragStartBehavior: args(#dragStartBehavior),
            keyboardDismissBehavior: args(#keyboardDismissBehavior),
            restorationId: args(#restorationId),
            clipBehavior: args(#clipBehavior),
          ),
        );

  @Goto(_i1.GridView.custom)
  GridView.custom(
    $ $config, {
    _i2.Key? key,
    _i3.Axis scrollDirection = _i3.Axis.vertical,
    bool reverse = false,
    _i1.ScrollController? controller,
    bool? primary,
    _i1.ScrollPhysics? physics,
    bool shrinkWrap = false,
    _i3.EdgeInsetsGeometry? padding,
    required _i4.SliverGridDelegate gridDelegate,
    required _i1.SliverChildDelegate childrenDelegate,
    double? cacheExtent,
    int? semanticChildCount,
    _i5.DragStartBehavior dragStartBehavior = _i5.DragStartBehavior.start,
    _i1.ScrollViewKeyboardDismissBehavior keyboardDismissBehavior = _i1.ScrollViewKeyboardDismissBehavior.manual,
    String? restorationId,
    ui.Clip clipBehavior = ui.Clip.hardEdge,
  }) : super(
          Argument({
            #key: key,
            #scrollDirection: scrollDirection,
            #reverse: reverse,
            #controller: controller,
            #primary: primary,
            #physics: physics,
            #shrinkWrap: shrinkWrap,
            #padding: padding,
            #gridDelegate: gridDelegate,
            #childrenDelegate: childrenDelegate,
            #cacheExtent: cacheExtent,
            #semanticChildCount: semanticChildCount,
            #dragStartBehavior: dragStartBehavior,
            #keyboardDismissBehavior: keyboardDismissBehavior,
            #restorationId: restorationId,
            #clipBehavior: clipBehavior,
          }),
          builder: (args) => _i1.GridView.custom(
            key: args(#key),
            scrollDirection: args(#scrollDirection),
            reverse: args(#reverse),
            controller: args(#controller),
            primary: args(#primary),
            physics: args(#physics),
            shrinkWrap: args(#shrinkWrap),
            padding: args(#padding),
            gridDelegate: args(#gridDelegate),
            childrenDelegate: args(#childrenDelegate),
            cacheExtent: args(#cacheExtent),
            semanticChildCount: args(#semanticChildCount),
            dragStartBehavior: args(#dragStartBehavior),
            keyboardDismissBehavior: args(#keyboardDismissBehavior),
            restorationId: args(#restorationId),
            clipBehavior: args(#clipBehavior),
          ),
        );

  @Goto(_i1.GridView.count)
  GridView.count(
    $ $config, {
    _i2.Key? key,
    _i3.Axis scrollDirection = _i3.Axis.vertical,
    bool reverse = false,
    _i1.ScrollController? controller,
    bool? primary,
    _i1.ScrollPhysics? physics,
    bool shrinkWrap = false,
    _i3.EdgeInsetsGeometry? padding,
    required int crossAxisCount,
    double mainAxisSpacing = 0.0,
    double crossAxisSpacing = 0.0,
    double childAspectRatio = 1.0,
    bool addAutomaticKeepAlives = true,
    bool addRepaintBoundaries = true,
    bool addSemanticIndexes = true,
    double? cacheExtent,
    List<_i1.Widget> children = const [],
    int? semanticChildCount,
    _i5.DragStartBehavior dragStartBehavior = _i5.DragStartBehavior.start,
    _i1.ScrollViewKeyboardDismissBehavior keyboardDismissBehavior = _i1.ScrollViewKeyboardDismissBehavior.manual,
    String? restorationId,
    ui.Clip clipBehavior = ui.Clip.hardEdge,
  }) : super(
          Argument({
            #key: key,
            #scrollDirection: scrollDirection,
            #reverse: reverse,
            #controller: controller,
            #primary: primary,
            #physics: physics,
            #shrinkWrap: shrinkWrap,
            #padding: padding,
            #crossAxisCount: crossAxisCount,
            #mainAxisSpacing: mainAxisSpacing,
            #crossAxisSpacing: crossAxisSpacing,
            #childAspectRatio: childAspectRatio,
            #addAutomaticKeepAlives: addAutomaticKeepAlives,
            #addRepaintBoundaries: addRepaintBoundaries,
            #addSemanticIndexes: addSemanticIndexes,
            #cacheExtent: cacheExtent,
            #children: children,
            #semanticChildCount: semanticChildCount,
            #dragStartBehavior: dragStartBehavior,
            #keyboardDismissBehavior: keyboardDismissBehavior,
            #restorationId: restorationId,
            #clipBehavior: clipBehavior,
          }),
          builder: (args) => _i1.GridView.count(
            key: args(#key),
            scrollDirection: args(#scrollDirection),
            reverse: args(#reverse),
            controller: args(#controller),
            primary: args(#primary),
            physics: args(#physics),
            shrinkWrap: args(#shrinkWrap),
            padding: args(#padding),
            crossAxisCount: args(#crossAxisCount),
            mainAxisSpacing: args(#mainAxisSpacing),
            crossAxisSpacing: args(#crossAxisSpacing),
            childAspectRatio: args(#childAspectRatio),
            addAutomaticKeepAlives: args(#addAutomaticKeepAlives),
            addRepaintBoundaries: args(#addRepaintBoundaries),
            addSemanticIndexes: args(#addSemanticIndexes),
            cacheExtent: args(#cacheExtent),
            children: args(#children),
            semanticChildCount: args(#semanticChildCount),
            dragStartBehavior: args(#dragStartBehavior),
            keyboardDismissBehavior: args(#keyboardDismissBehavior),
            restorationId: args(#restorationId),
            clipBehavior: args(#clipBehavior),
          ),
        );

  @Goto(_i1.GridView.extent)
  GridView.extent(
    $ $config, {
    _i2.Key? key,
    _i3.Axis scrollDirection = _i3.Axis.vertical,
    bool reverse = false,
    _i1.ScrollController? controller,
    bool? primary,
    _i1.ScrollPhysics? physics,
    bool shrinkWrap = false,
    _i3.EdgeInsetsGeometry? padding,
    required double maxCrossAxisExtent,
    double mainAxisSpacing = 0.0,
    double crossAxisSpacing = 0.0,
    double childAspectRatio = 1.0,
    bool addAutomaticKeepAlives = true,
    bool addRepaintBoundaries = true,
    bool addSemanticIndexes = true,
    double? cacheExtent,
    List<_i1.Widget> children = const [],
    int? semanticChildCount,
    _i5.DragStartBehavior dragStartBehavior = _i5.DragStartBehavior.start,
    _i1.ScrollViewKeyboardDismissBehavior keyboardDismissBehavior = _i1.ScrollViewKeyboardDismissBehavior.manual,
    String? restorationId,
    ui.Clip clipBehavior = ui.Clip.hardEdge,
  }) : super(
          Argument({
            #key: key,
            #scrollDirection: scrollDirection,
            #reverse: reverse,
            #controller: controller,
            #primary: primary,
            #physics: physics,
            #shrinkWrap: shrinkWrap,
            #padding: padding,
            #maxCrossAxisExtent: maxCrossAxisExtent,
            #mainAxisSpacing: mainAxisSpacing,
            #crossAxisSpacing: crossAxisSpacing,
            #childAspectRatio: childAspectRatio,
            #addAutomaticKeepAlives: addAutomaticKeepAlives,
            #addRepaintBoundaries: addRepaintBoundaries,
            #addSemanticIndexes: addSemanticIndexes,
            #cacheExtent: cacheExtent,
            #children: children,
            #semanticChildCount: semanticChildCount,
            #dragStartBehavior: dragStartBehavior,
            #keyboardDismissBehavior: keyboardDismissBehavior,
            #restorationId: restorationId,
            #clipBehavior: clipBehavior,
          }),
          builder: (args) => _i1.GridView.extent(
            key: args(#key),
            scrollDirection: args(#scrollDirection),
            reverse: args(#reverse),
            controller: args(#controller),
            primary: args(#primary),
            physics: args(#physics),
            shrinkWrap: args(#shrinkWrap),
            padding: args(#padding),
            maxCrossAxisExtent: args(#maxCrossAxisExtent),
            mainAxisSpacing: args(#mainAxisSpacing),
            crossAxisSpacing: args(#crossAxisSpacing),
            childAspectRatio: args(#childAspectRatio),
            addAutomaticKeepAlives: args(#addAutomaticKeepAlives),
            addRepaintBoundaries: args(#addRepaintBoundaries),
            addSemanticIndexes: args(#addSemanticIndexes),
            cacheExtent: args(#cacheExtent),
            children: args(#children),
            semanticChildCount: args(#semanticChildCount),
            dragStartBehavior: args(#dragStartBehavior),
            keyboardDismissBehavior: args(#keyboardDismissBehavior),
            restorationId: args(#restorationId),
            clipBehavior: args(#clipBehavior),
          ),
        );
}
